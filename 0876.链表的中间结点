/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

//利用快慢指针，慢的每次走一个，快的每次走两个，快的走完刚好，慢的走一半
struct ListNode* middleNode(struct ListNode* head)
{
    struct ListNode*fast,*slow;//定义快 慢指针
    fast = slow = head;//两个同时指向头结点
    while(fast &&fast->next)//fast是判断链表数字总和为奇数位时，slow是判断链表数字总和为偶数位的时候
    {
        fast = fast->next->next;//快的走两步
        slow = slow->next;//慢的走一步
    }
    return slow;//返回慢的即是要找的中间节点
}
