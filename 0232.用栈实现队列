typedef int STDatatype;
typedef struct Stack//栈
{
	STDatatype* a;//定义一个数组，用来存放元素
	int capacity;//容量
	int top;//数组下标,初始为0，表示栈顶位置下一个位置下标
}ST;
void StackInt(ST* ps);//初始化栈
void StackDestory(ST* ps);//销毁栈
bool StackEmpty(ST* ps);//判断栈是否为空
int StackSize(ST* ps);//栈的大小
STDatatype StackTop(ST* ps);//栈顶元素是什么
void StackPush(ST* ps, STDatatype x);//入栈 
void StackPop(ST* ps);//出栈
void StackInt(ST* ps)//初始化栈
{
	assert(ps);
	ps->a = (STDatatype*)malloc(sizeof(STDatatype) * 4);//只需要给栈的数组存储开辟空间即可
	if (ps->a == NULL)
	{
		perror("malloc fail");
		exit(-1);
	}
	ps->capacity = 4;//初始容量为4
	ps->top = 0;//角标为0，初始为0，表示栈顶位置下一个位置下标,即1为第一个位置下标
}

void StackDestory(ST* ps)//销毁栈
{
	assert(ps);

	free(ps->a);
	ps->a = NULL;
	ps->capacity =ps->top = 0;
}

bool StackEmpty(ST* ps)//判断栈是否为空
{
	assert(ps);
	return ps->top == 0;
}

void StackPush(ST* ps, STDatatype x)//入栈
{
	assert(ps);
	if (ps->capacity == ps->top)//扩容
	{
		STDatatype* tmp = (STDatatype*)realloc(ps->a, sizeof(STDatatype) * 2 * (ps->capacity));//新的栈的内存为原来STDatatype的二倍
		if (tmp == NULL)
		{
			perror("realloc fail");
			exit(-1);
		}
		ps->a = tmp;//将原数组变成新的数组大小
		ps->capacity *= 2;//内存为二倍
	}
	ps->a[ps->top] = x;//将top处的值赋进去
	ps->top++;//下标++
}

void StackPop(ST* ps)//出栈
{
	assert(ps);
	assert(!StackEmpty(ps));//占不能为空还出栈
	
	ps->top--;
}

STDatatype StackTop(ST* ps)//栈顶的元素
{
	assert(ps);
	assert(!StackEmpty(ps));

	return ps->a[ps->top - 1];//数组下标从0开始的
}

int StackSize(ST* ps)//栈的大小
{	
	assert(ps);
	return ps->top;
}

typedef struct 
{
    ST push;
    ST pop;
} MyQueue;
bool myQueueEmpty(MyQueue* obj) ;//函数的声明，不声明会报错
void myQueuePush(MyQueue* obj, int x);
int myQueuePop(MyQueue* obj) ;
int myQueuePeek(MyQueue* obj) ;

MyQueue* myQueueCreate() 
{
    MyQueue * obj = (MyQueue *)malloc(sizeof(MyQueue));
    StackInt(&obj->push);//创造两个栈，一个入，一个出
    StackInt(&obj->pop);
    return obj;
}

void myQueuePush(MyQueue* obj, int x)
{
   assert(obj);
   StackPush(&obj->push,x);//一直往入的那个栈进入数据
}

int myQueuePop(MyQueue* obj) 
{
    assert(obj);
    assert(!myQueueEmpty(obj));

    int ret = myQueuePeek(obj);//用一次peek查看一次队头，再将其导出来即可
    StackPop(&obj->pop);//·出一次即可
    return ret;
}

int myQueuePeek(MyQueue* obj) //peek窥探 在这里的意思是查看生成队列的队头
{
    assert(obj);
    assert(!myQueueEmpty(obj));

    if(StackEmpty(&obj->pop))//如果出的pop队列为空且push队列不为空 那就倒一下
    {
        while(!StackEmpty(&obj->push))
        {
            StackPush(&obj->pop,StackTop(&obj->push));//将入的push队列的第一个导进去到 出的pop队列
            StackPop(&obj->push);//让导进去的那元素出栈  依次循环直到push为空
        }
    }
    return StackTop(&obj->pop);
}

bool myQueueEmpty(MyQueue* obj) 
{
    assert(obj);
    return (StackEmpty(&obj->push) && StackEmpty(&obj->pop));
}

void myQueueFree(MyQueue* obj) 
{
    assert(obj);
    StackDestory(&obj->push);
    StackDestory(&obj->pop);
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
