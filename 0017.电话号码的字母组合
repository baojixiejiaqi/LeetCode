class Solution
{
    string _numtostr[10] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
public:
    void Combinations(const string &digits,size_t di,string combinestr,vector<string> & strv)
    {
        //当等于选择数字的深度，就保存这个，再返回上一次
        if(di == digits.size())
        {
            strv.push_back(combinestr);
            return ;
        }
        //字符串减字符串的值为int 找到字母的对应的数字
        int num = digits[di] - '0';
        //将其数字的内容转成str ，再赋予str里面去
        string str = _numtostr[num];
        //递归调用下一个
        for(auto ch:str)
        {
            Combinations(digits,di+1,combinestr+ch,strv);
        }

    }
    //递归要分为子问题,所以要分函数来解决子问题
    vector<string> letterCombinations(string digits) 
    {
        vector<string> strv;
        //为空直接返回
        if(digits.size() == 0)
        {
            return strv;
        }
        //从零开始，传字符串
        Combinations(digits,0,"",strv);
        return strv;
    }
};
