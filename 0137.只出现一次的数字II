class Solution {
public:
//提供另外一种容易理解的思路，将每个数想象成32位的二进制，对于每一位的二进制的1和0累加起来必然是3N或者3N+1
// 为3N代表目标值在这一位没贡献，3N+1代表目标值在这一位有贡献(=1)，然后将所有有贡献的位|起来就是结果
    int singleNumber(vector<int>& nums) 
    {
        int ans = 0;
        for(int i = 0;i<32;++i)
        {
            // 所以针对每一位的对应二进制数值求和
            int total = 0;
            //for(auto num:nums)
            for(int num:nums)
            {
                total += ((num>>i) &1); // 提取从右往左数第i位的数值
                                        //将所有nums[i]二进制下的第i位数值进行求和
            }
            //1出现的次数一定是3的倍数+1或0，那么对这个数%3得到的结果就是目的数字在该位上的值
            if(total % 3)
            {
                //或运算符
                ans |= (1<<i);
            }
        }
        return ans;
    }
};
